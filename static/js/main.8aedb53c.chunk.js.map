{"version":3,"sources":["logo.svg","constants.js","components/choropleth.js","components/mapexplorer.js","components/home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MAP_TYPES","MAPS_DIR","propertyFieldMap","country","state","highlightRegionInMap","name","mapType","propertyField","d3","classed","d","i","nodes","properties","parentNode","appendChild","ChoroplethMap","statistic","mapData","setHoveredRegion","mapMeta","changeMap","choroplethMap","useRef","useEffect","a","remove","geoDataFile","data","current","ready","renderData","console","log","geoData","svg","width","attr","height","projection","center","scale","translate","path","onceTouchedRegion","append","selectAll","topojson","objects","graphObjectName","features","enter","n","maxRecovered","on","err","handleMouseover","target","style","text","value","parseFloat","total","toFixed","toTitleCase","str","toLowerCase","split","length","charAt","toUpperCase","slice","join","cells","label","color","domain","genLength","generatedLabels","labelDelimiter","Math","floor","n1","n2","delta","Array","from","keys","map","legendLinear","legendColor","shapeWidth","titleWidth","labels","title","orient","select","call","className","id","viewBox","preserveAspectRatio","ref","states","stateDistrictWiseData","stateHighlighted","useState","currentHoveredRegion","setCurrentHoveredRegion","India","currentMap","setCurrentMap","region","getRegionFromState","undefined","regionHighlighted","useMemo","currentMapData","reduce","acc","recovered","parseInt","districtWiseData","districtData","Object","district","filter","confirmed","active","deaths","getRegionFromDistrict","switchMapToState","newMap","topDistrict","sort","b","animationDelay","Unknown","onClick","Home","props","setStates","setStateDistrictWiseData","fetched","setFetched","setLastUpdated","getStates","Promise","all","axios","get","response","stateDistrictWiseResponse","statewise","lastupdatedtime","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8aedb53c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const MAP_TYPES = {\n  COUNTRY: 'country',\n  STATE: 'state',\n};\n\nexport const MAPS_DIR = './coronoClone/maps';\n","import React, {useState, useEffect, useRef} from 'react';\nimport * as d3 from 'd3';\nimport {legendColor} from 'd3-svg-legend';\nimport * as topojson from 'topojson';\nimport {MAP_TYPES} from '../constants';\n\nconst propertyFieldMap = {\n  country: 'ST_NM',\n  state: 'district',\n};\n\nexport const highlightRegionInMap = (name, mapType) => {\n  const propertyField = propertyFieldMap[mapType];\n  let paths = d3.selectAll('.path-region');\n  paths.classed('map-hover', (d, i, nodes) => {\n    if (name == d.properties[propertyField]) {\n      nodes[i].parentNode.appendChild(nodes[i]);\n      return true;\n    }\n    return false;\n  });\n}\n\nfunction ChoroplethMap({statistic, mapData, setHoveredRegion, mapMeta, changeMap}) {\n  // const [rendered, setRendered] = useState(false);\n  // // const [states, setStates] = useState(props.states);\n  // // const [state, setState] = useState({});\n  // const [index, setIndex] = useState(1);\n  const choroplethMap = useRef(null);\n\n  useEffect(()=>{\n    (async () => {\n      d3.selectAll('svg#chart > *').remove();\n      const data = await d3.json(mapMeta.geoDataFile);\n      if (statistic && choroplethMap.current) {\n        ready(data);\n        renderData();\n      // setState(states[1]);\n        console.log(\"got upto here!\");\n      } else {\n        console.log(\"didn't pass\");\n      }\n    })();\n  }, [mapMeta.geoDataFile]);\n\n  const handleMouseover = (name) => {\n    try {\n      setHoveredRegion(name, mapMeta.mapType);\n    } catch (err) {\n      console.log('err', err);\n    }\n  };\n\n  const propertyField = propertyFieldMap[mapMeta.mapType];\n  const maxInterpolation = 0.8; // this used to be 0.8\n\n  function ready(geoData) {\n    const svg = d3.select(choroplethMap.current);\n    const width = +svg.attr('width');\n    const height = +svg.attr('height');\n\n    const projection = d3.geoMercator()\n        .center(mapMeta.center)\n        .scale(mapMeta.scale)\n        .translate([width/2, height/2]);\n\n    const path = d3.geoPath(projection);\n\n    var onceTouchedRegion = null;\n\n    svg.append('g')\n        .attr('class', 'states')\n        .selectAll('path')\n        .data(topojson.feature(geoData, geoData.objects[mapMeta.graphObjectName]).features)\n        .enter().append('path')\n        .attr('class', 'path-region')\n        .attr('fill', function(d) {\n          const n = mapData[d.properties[propertyField]] || 0;\n          const color = (n == 0) ? '#ffffff' : d3.interpolateGreens(maxInterpolation * n/(statistic.maxRecovered || 0.001)); // make it a percentage!\n          return color;\n        })\n        .attr('d', path)\n        .attr('pointer-events', 'all')\n        .on('mouseover', (d) => {\n          handleMouseover(d.properties[propertyField]);\n          const target = d3.event.target;\n          d3.select(target.parentNode.appendChild(target)).attr('class', 'map-hover');\n        })\n        .on('mouseleave', (d) => {\n          const n = mapData[d.properties[propertyField]] || 0;\n          const target = d3.event.target;\n          d3.select(target).attr('class', 'path-region map-default');\n          if (onceTouchedRegion == d) onceTouchedRegion = null;\n        })\n        .on('touchstart', (d) => {\n          if (onceTouchedRegion == d) onceTouchedRegion = null;\n          else onceTouchedRegion = d;\n        })\n        .on('click', (d) => {\n          if (onceTouchedRegion) {\n            return;\n          }\n          if (mapMeta.mapType === MAP_TYPES.STATE) {\n            return;\n          }\n          changeMap(d.properties[propertyField], mapMeta.mapType);\n        })\n        .style('cursor', 'pointer')\n        .append('title')\n        .text(function(d) {\n          const value = mapData[d.properties[propertyField]] || 0;\n          return parseFloat(100*(value/(statistic.total || 0.001))).toFixed(2) + '% from ' + toTitleCase(d.properties[propertyField]);\n        });\n\n    svg.append('path')\n        .attr('stroke', '#ff073a20')\n        .attr('fill', 'none')\n        .attr('stroke-width', 2)\n        .attr('d', path(topojson.mesh(geoData, geoData.objects[mapMeta.graphObjectName])));\n  };\n\n  const toTitleCase = (str) => {\n    str = str.toLowerCase().split(' ');\n    for (let i = 0; i < str.length; i++) {\n      str[i] = str[i].charAt(0).toUpperCase() + str[i].slice(1);\n    }\n    return str.join(' ');\n  };\n\n  const renderData = () => {\n    const svg = d3.select(choroplethMap.current);\n\n    // Colorbar\n    const maxInterpolation = 0.8;\n    const color = d3\n        .scaleSequential(d3.interpolateGreens)\n        .domain([0, (statistic.maxRecovered / maxInterpolation) || 10]);\n\n    let cells = null;\n    let label = null;\n\n    label = ({i, genLength, generatedLabels, labelDelimiter}) => {\n      if (i === genLength - 1) {\n        const n = Math.floor(generatedLabels[i]);\n        return `${n}+`;\n      } else {\n        const n1 = 1 + Math.floor(generatedLabels[i]);\n        const n2 = Math.floor(generatedLabels[i + 1]);\n        return `${n1} - ${n2}`;\n      }\n    };\n\n    const numCells = 6;\n    const delta = Math.floor((statistic.maxRecovered < numCells ? numCells : statistic.maxRecovered) / (numCells - 1));\n\n    cells = Array.from(Array(numCells).keys()).map((i) => i * delta);\n\n    svg.append('g')\n        .attr('class', 'legendLinear')\n        .attr('transform', 'translate(1, 375)');\n\n    const legendLinear = legendColor()\n        .shapeWidth(50)\n        .cells(cells)\n        .titleWidth(3)\n        .labels(label)\n        .title('Recovered Cases')\n        .orient('vertical')\n        .scale(color);\n\n    svg.select('.legendLinear')\n        .call(legendLinear);\n  };\n\n  return (\n    <div className=\"svg-parent\">\n      <svg id=\"chart\" width=\"650\" height=\"450\" viewBox=\"0 0 650 450\" preserveAspectRatio=\"xMidYMid meet\" ref={choroplethMap}></svg>\n    </div>\n  );\n}\n\nexport default ChoroplethMap;\n","import React, {useState, useEffect, useMemo} from 'react';\nimport ChoroplethMap, {highlightRegionInMap} from './choropleth';\nimport {MAP_TYPES, MAPS_DIR} from '../constants';\n\nconst mapMeta = {\n  'India': {\n    name: 'India',\n    geoDataFile: `${MAPS_DIR}/india.json`,\n    mapType: MAP_TYPES.COUNTRY,\n    graphObjectName: 'india',\n    center: [78.9, 22],\n    scale: 1000,\n  },\n  'Andaman and Nicobar Islands': {\n    name: 'Andaman and Nicobar Islands',\n    geoDataFile: `${MAPS_DIR}/andamannicobarislands.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'andamannicobarislands_district',\n    center: [92, 10],\n    scale: 4000,\n  },\n  'Arunachal Pradesh': {\n    name: 'Arunachal Pradesh',\n    geoDataFile: `${MAPS_DIR}/arunachalpradesh.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'arunachalpradesh_district',\n    center: [94, 27],\n    scale: 5000,\n  },\n  'Andhra Pradesh': {\n    name: 'Andhra Pradesh',\n    geoDataFile: `${MAPS_DIR}/andhrapradesh.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'andhrapradesh_district',\n    center: [80, 16],\n    scale: 3200,\n  },\n  'Assam': {\n    name: 'Assam',\n    geoDataFile: `${MAPS_DIR}/assam.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'assam_district',\n    center: [92, 26],\n    scale: 4500,\n  },\n  'Bihar': {\n    name: 'Bihar',\n    geoDataFile: `${MAPS_DIR}/bihar.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'bihar_district',\n    center: [85, 25],\n    scale: 6000,\n  },\n  'Chhattisgarh': {\n    name: 'Chhattisgarh',\n    geoDataFile: `${MAPS_DIR}/chhattisgarh.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'chhattisgarh_district',\n    center: [82, 21],\n    scale: 4500,\n  },\n  'Delhi': {\n    name: 'Delhi',\n    geoDataFile: `${MAPS_DIR}/delhi.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'delhi_1997-2012_district',\n    center: [77, 28.5],\n    scale: 30000,\n  },\n  'Karnataka': {\n    name: 'Karnataka',\n    geoDataFile: `${MAPS_DIR}/karnataka.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'karnataka_district',\n    center: [76, 15.05],\n    scale: 4900,\n  },\n  'Kerala': {\n    name: 'Kerala',\n    geoDataFile: `${MAPS_DIR}/kerala.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'kerala_district',\n    center: [76, 10.5],\n    scale: 5000,\n  },\n  'Goa': {\n    name: 'Goa',\n    geoDataFile: `${MAPS_DIR}/goa.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'goa_district',\n    center: [74, 15],\n    scale: 20000,\n  },\n  'Gujarat': {\n    name: 'Gujarat',\n    geoDataFile: `${MAPS_DIR}/gujarat.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'gujarat_district_2011',\n    center: [70.5, 22],\n    scale: 4000,\n  },\n  'Haryana': {\n    name: 'Haryana',\n    geoDataFile: `${MAPS_DIR}/haryana.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'haryana_district',\n    center: [76, 29],\n    scale: 8000,\n  },\n  'Himachal Pradesh': {\n    name: 'Himachal Pradesh',\n    geoDataFile: `${MAPS_DIR}/himachalpradesh.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'himachalpradesh_district',\n    center: [77, 32],\n    scale: 7000,\n  },\n  'Jammu and Kashmir': {\n    name: 'Jammu and Kashmir',\n    geoDataFile: `${MAPS_DIR}/jammukashmir.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'jammukashmir_district',\n    center: [75, 34],\n    scale: 5000,\n  },\n  'Jharkhand': {\n    name: 'Jharkhand',\n    geoDataFile: `${MAPS_DIR}/jharkhand.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'jharkhand_district',\n    center: [85, 23],\n    scale: 4500,\n  },\n  'Ladakh': {\n    name: 'Ladakh',\n    geoDataFile: `${MAPS_DIR}/ladakh.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'ladakh_district',\n    center: [76, 33],\n    scale: 3000,\n  },\n  'Madhya Pradesh': {\n    name: 'Madhya Pradesh',\n    geoDataFile: `${MAPS_DIR}/madhyapradesh.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'madhyapradesh_district',\n    center: [77, 23],\n    scale: 3000,\n  },\n  'Maharashtra': {\n    name: 'Maharashtra',\n    geoDataFile: `${MAPS_DIR}/maharashtra.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'maharashtra_district',\n    center: [75, 18],\n    scale: 3000,\n  },\n  'Manipur': {\n    name: 'Manipur',\n    geoDataFile: `${MAPS_DIR}/manipur.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'manipur_pre2016_districts',\n    center: [93.5, 24],\n    scale: 9000,\n  },\n  'Meghalaya': {\n    name: 'Meghalaya',\n    geoDataFile: `${MAPS_DIR}/meghalaya.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'meghalaya_district',\n    center: [91, 24],\n    scale: 6500,\n  },\n  'Mizoram': {\n    name: 'Mizoram',\n    geoDataFile: `${MAPS_DIR}/mizoram.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'mizoram_district',\n    center: [92.5, 23],\n    scale: 10000,\n  },\n  'Nagaland': {\n    name: 'Nagaland',\n    geoDataFile: `${MAPS_DIR}/nagaland.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'nagaland_district',\n    center: [94, 25],\n    scale: 7500,\n  },\n  'Odisha': {\n    name: 'Odisha',\n    geoDataFile: `${MAPS_DIR}/odisha.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'odisha_district',\n    center: [84, 20],\n    scale: 4000,\n  },\n  'Punjab': {\n    name: 'Punjab',\n    geoDataFile: `${MAPS_DIR}/punjab.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'punjab_district',\n    center: [75, 30.7],\n    scale: 8000,\n  },\n  'Rajasthan': {\n    name: 'Rajasthan',\n    geoDataFile: `${MAPS_DIR}/rajasthan.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'rajasthan_district',\n    center: [73, 25],\n    scale: 3000,\n  },\n  'Sikkim': {\n    name: 'Sikkim',\n    geoDataFile: `${MAPS_DIR}/sikkim.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'sikkim_district',\n    center: [88, 27.5],\n    scale: 15000,\n  },\n  'Tamil Nadu': {\n    name: 'Tamil Nadu',\n    geoDataFile: `${MAPS_DIR}/tamil-nadu.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'tamilnadu_district',\n    center: [83, 18],\n    scale: 1500,\n  },\n  'Telangana': {\n    name: 'Telangana',\n    geoDataFile: `${MAPS_DIR}/telugana.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'telugana',\n    center: [79, 17],\n    scale: 5000,\n  },\n  'Tripura': {\n    name: 'Tripura',\n    geoDataFile: `${MAPS_DIR}/tripura.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'tripura_district',\n    center: [91.5, 23],\n    scale: 10000,\n  },\n  'Uttarakhand': {\n    name: 'Uttarakhand',\n    geoDataFile: `${MAPS_DIR}/uttarakhand.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'uttarakhand_district',\n    center: [79, 30],\n    scale: 8000,\n  },\n  'Uttar Pradesh': {\n    name: 'Uttar Pradesh',\n    geoDataFile: `${MAPS_DIR}/uttarpradesh.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'uttarpradesh_district',\n    center: [80, 27],\n    scale: 3500,\n  },\n\n  'West Bengal': {\n    name: 'West Bengal',\n    geoDataFile: `${MAPS_DIR}/westbengal.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'westbengal_district',\n    center: [87, 24],\n    scale: 5000,\n  },\n};\n\n// kind of a nameless function\nexport default function({states, stateDistrictWiseData, stateHighlighted}) {\n  // const [states, setStates] = useState(props.states);\n  const [currentHoveredRegion, setCurrentHoveredRegion] = useState({});\n  const [currentMap, setCurrentMap] = useState(mapMeta.India);\n\n  useEffect(() => {\n    // setStates(props.states);\n    // setCurrentHoveredRegion()\n  }, [states]);\n\n  useEffect(() => {\n    const region = getRegionFromState(states[1]);\n    setCurrentHoveredRegion(region);\n  }, [states]);\n\n  useEffect(() => {\n    if (currentMap.mapType === MAP_TYPES.STATE) {\n      return;\n    }\n\n    if (stateHighlighted === null) {\n      highlightRegionInMap(null, currentMap.mapType);\n    } else {\n      if (stateHighlighted !== undefined) {\n        let regionHighlighted = getRegionFromState(stateHighlighted.state);\n        setCurrentHoveredRegion(regionHighlighted);\n        highlightRegionInMap(regionHighlighted.name, currentMap.mapType);\n      }\n    }\n  }, [stateHighlighted]);\n\n  // this appears to tie numbers about total number of confirmed cases to each state/district\n  const [statistic, currentMapData] = useMemo(() => {\n    const statistic = {total: 0, maxRecovered: 0};\n    let currentMapData = {};\n\n    if (currentMap.mapType === MAP_TYPES.COUNTRY) {\n      currentMapData = states.reduce((acc, state) => {\n        if (state.state === 'Total') {\n          return acc;\n        }\n        const recovered = parseInt(state.recovered);\n        statistic.total += recovered;\n        if (recovered > statistic.maxRecovered) {\n          statistic.maxRecovered = recovered;\n        }\n\n        acc[state.state] = state.recovered;\n\n        return acc;\n      }, {});\n    } else if (currentMap.mapType === MAP_TYPES.STATE) {\n      const districtWiseData = (\n        stateDistrictWiseData[currentMap.name] || {districtData: {}}\n      ).districtData;\n      currentMapData = Object.keys(districtWiseData).reduce((acc, district) => {\n        const recovered = parseInt(districtWiseData[district].recovered);\n        statistic.total += recovered;\n        if (recovered > statistic.maxRecovered) {\n          statistic.maxRecovered = recovered;\n        }\n        acc[district] = districtWiseData[district].recovered;\n        return acc;\n      }, {});\n    }\n    console.log([statistic, currentMapData])\n    return [statistic,currentMapData];\n  }, [currentMap]);\n\n  const setHoveredRegion = (name, currentMap) => {\n    if (currentMap.mapType === MAP_TYPES.COUNTRY) {\n      setCurrentHoveredRegion(\n          getRegionFromState(states.filter((state) => name === state.state)[0]),\n      );\n    } else if (currentMap.mapType === MAP_TYPES.STATE) {\n      const state = stateDistrictWiseData[currentMap.name] || {\n        districtData: {},\n      };\n      let districtData = state.districtData[name];\n      if (!districtData) {\n        districtData = {\n          confirmed: 0,\n          active: 0,\n          deaths: 0,\n          recovered: 0,\n        };\n      }\n      setCurrentHoveredRegion(getRegionFromDistrict(districtData, name));\n    }\n  };\n\n\n  if (!currentHoveredRegion) {\n    return null;\n  }\n\n  const getRegionFromDistrict = (districtData, name) => {\n    if (!districtData) {\n      return;\n    }\n    const region = {...districtData};\n    if (!region.name) {\n      region.name = name;\n    }\n    return region;\n  };\n\n  const getRegionFromState = (state) => {\n    if (!state) {\n      return;\n    }\n    const region = {...state};\n    if (!region.name) {\n      region.name = region.state;\n    }\n    return region;\n  };\n\n  const switchMapToState = (name) => {\n    const newMap = mapMeta[name];\n    if (!newMap) {\n      return;\n    }\n    setCurrentMap(newMap);\n    if (newMap.mapType === MAP_TYPES.COUNTRY) {\n      setHoveredRegion(states[1].state, newMap);\n    } else if (newMap.mapType === MAP_TYPES.STATE) {\n      const districtData = (stateDistrictWiseData[name] || {districtData: {}})\n          .districtData;\n      const topDistrict = Object.keys(districtData)\n          .filter((name) => name !== 'Unknown')\n          .sort((a, b) => {\n            return districtData[b].confirmed - districtData[a].confirmed;\n          })[0];\n      setHoveredRegion(topDistrict, newMap);\n    }\n  };\n\n  return (\n    <div className=\"MapExplorer fadeInUp\" style={{animationDelay: '1.2s'}}>\n      <div className=\"header\">\n        <h1>{currentMap.name} Map</h1>\n        <h6>\n          Hover over a{' '}\n          {currentMap.mapType === MAP_TYPES.COUNTRY ? 'state' : 'district'} for\n          more details\n        </h6>\n        {/* <h3>\n          Last updated should go in here\n        </h3> */}\n      </div>\n\n      <div className=\"map-stats\">\n        <div className=\"stats\">\n          <h5>Confirmed</h5>\n          <div className=\"stats-bottom\">\n            <h1>{currentHoveredRegion.confirmed}</h1>\n            <h6>{}</h6>\n          </div>\n        </div>\n\n        <div className=\"stats is-blue\">\n          <h5>Active</h5>\n          <div className=\"stats-bottom\">\n            <h1>{currentHoveredRegion.active || ''}</h1>\n            <h6>{}</h6>\n          </div>\n        </div>\n\n        <div className=\"stats is-green\">\n          <h5>Recovered</h5>\n          <div className=\"stats-bottom\">\n            <h1>{currentHoveredRegion.recovered || ''}</h1>\n            <h6>{}</h6>\n          </div>\n        </div>\n\n        <div className=\"stats is-gray\">\n          <h5>Deceased</h5>\n          <div className=\"stats-bottom\">\n            <h1>{currentHoveredRegion.deaths || ''}</h1>\n            <h6>{}</h6>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"meta\">\n        <h2>{currentHoveredRegion.name}</h2>\n        {currentMap.mapType === MAP_TYPES.STATE && currentMapData.Unknown > 0 ? (\n            <h4 className=\"unknown\">Districts unknown for {currentMapData.Unknown} people</h4>\n          ) : null}\n\n        {currentMap.mapType === MAP_TYPES.STATE ? (\n          <div className=\"button back-button\" onClick={() => switchMapToState('India')}>\n            Back\n          </div>\n      ) : null}\n      </div>\n\n      <ChoroplethMap\n        statistic={statistic}\n        mapMeta={currentMap}\n        mapData={currentMapData}\n        setHoveredRegion={(region) => setHoveredRegion(region, currentMap)}\n        changeMap={switchMapToState}\n      />\n\n    </div>\n  );\n}\n\n","import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\n// import {format, zonedTimeToUtc} from 'date-fns-tz';\n// import {formatDistance} from 'date-fns';\n// we don't need all these unused imports\nimport MapExplorer from './mapexplorer';\n\nfunction Home(props) {\n  const [states, setStates] = useState([]);\n  const [stateDistrictWiseData, setStateDistrictWiseData] = useState({});\n  const [fetched, setFetched] = useState(false);\n  const [graphOption, setGraphOption] = useState(1);\n  const [lastUpdated, setLastUpdated] = useState('');\n  const [deltas, setDeltas] = useState([]);\n  const [timeseriesMode, setTimeseriesMode] = useState(true);\n  const [stateHighlighted, setStateHighlighted] = useState(undefined);\n\n  useEffect(()=> {\n    if (fetched===false) {\n      getStates();\n    }\n  }, [fetched]);\n\n  const getStates = async () => {\n    try {\n      const [response, stateDistrictWiseResponse] = await Promise.all([axios.get('https://api.covid19india.org/data.json'), axios.get('https://api.covid19india.org/state_district_wise.json')]);\n      setStates(response.data.statewise);\n      setLastUpdated(response.data.statewise[0].lastupdatedtime);\n      // setDeltas(response.data.key_values[0]);\n      setStateDistrictWiseData(stateDistrictWiseResponse.data);\n      setFetched(true);\n      console.log(\"fetched set to true\");\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const formatDate = (unformattedDate) => {\n    const day = unformattedDate.slice(0, 2);\n    const month = unformattedDate.slice(3, 5);\n    const year = unformattedDate.slice(6, 10);\n    const time = unformattedDate.slice(11);\n    return `${year}-${month}-${day}T${time}+05:30`;\n  };\n\n  const onHighlightState = (state, index) => {\n    if (!state && !index) setStateHighlighted(null);\n    else setStateHighlighted({state, index});\n  };\n\n  return (\n    <div className=\"Home\">\n        {fetched && (\n          <MapExplorer\n          states={states}\n          stateDistrictWiseData={stateDistrictWiseData}\n          stateHighlighted={stateHighlighted}\n        />\n        )}\n    </div>\n  );\n}\n\nexport default Home;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.scss';\nimport Home from './components/home';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home></Home>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}